// <auto-generated />
using System;
using Ecommerce.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Models
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Ecommerce.Models.__EFMigrationsHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__EFMigrationsHistory");
                });

            modelBuilder.Entity("Ecommerce.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("user_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "user_id" }, "user_id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Ecommerce.Models.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_bin");

                    b.HasKey("id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Ecommerce.Models.Card", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("card_number")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("cvc")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<DateOnly?>("expiration_date")
                        .HasColumnType("date");

                    b.Property<int?>("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "user_id" }, "user_id1");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Ecommerce.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("form_specification_sheet")
                        .HasColumnType("json");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("type")
                        .HasColumnType("enum('Components','Peripherals','PC')");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("product_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("total_amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "product_id" }, "product_id");

                    b.HasIndex(new[] { "user_id" }, "user_id2");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("delivery")
                        .HasColumnType("enum('pending','success','failed')");

                    b.Property<int?>("order_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("product_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "order_id" }, "order_id");

                    b.HasIndex(new[] { "product_id" }, "product_id1");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("brand_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("category_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasMaxLength(255)
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("specification_sheet")
                        .HasColumnType("json");

                    b.Property<int?>("stocks")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("id");

                    b.HasIndex(new[] { "brand_id" }, "brand_id");

                    b.HasIndex(new[] { "category_id" }, "category_id1");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.Promotion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateOnly?>("duration")
                        .HasColumnType("date");

                    b.Property<decimal?>("new_price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("product_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("promotion_description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("id");

                    b.HasIndex(new[] { "product_id" }, "product_id2");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Ecommerce.Models.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("body")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("product_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("rating")
                        .HasColumnType("int(11)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "product_id" }, "product_id3");

                    b.HasIndex(new[] { "user_id" }, "user_id3");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Ecommerce.Models.Transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("card_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("currency")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("method")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("order_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("status")
                        .HasColumnType("enum('pending','success','failed')");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("user_id")
                        .HasColumnType("int(11)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "card_id" }, "card_id");

                    b.HasIndex(new[] { "order_id" }, "order_id1");

                    b.HasIndex(new[] { "user_id" }, "user_id4");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Ecommerce.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role")
                        .HasColumnType("enum('superadmin','admin','customers')");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<bool?>("verified_email")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ecommerce.Models.Address", b =>
                {
                    b.HasOne("Ecommerce.Models.User", "user")
                        .WithMany("Addresses")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Addresses_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.Models.Card", b =>
                {
                    b.HasOne("Ecommerce.Models.User", "user")
                        .WithMany("Cards")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Cards_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.HasOne("Ecommerce.Models.Product", "product")
                        .WithMany("Orders")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Orders_ibfk_2");

                    b.HasOne("Ecommerce.Models.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Orders_ibfk_1");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Models.Order", "order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItems_ibfk_1");

                    b.HasOne("Ecommerce.Models.Product", "product")
                        .WithMany("OrderItems")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItems_ibfk_2");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.HasOne("Ecommerce.Models.Brand", "brand")
                        .WithMany("Products")
                        .HasForeignKey("brand_id")
                        .HasConstraintName("Products_ibfk_1");

                    b.HasOne("Ecommerce.Models.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Products_ibfk_2");

                    b.Navigation("brand");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Ecommerce.Models.Promotion", b =>
                {
                    b.HasOne("Ecommerce.Models.Product", "product")
                        .WithMany("Promotions")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Promotions_ibfk_1");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Ecommerce.Models.Review", b =>
                {
                    b.HasOne("Ecommerce.Models.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Reviews_ibfk_2");

                    b.HasOne("Ecommerce.Models.User", "user")
                        .WithMany("Reviews")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Reviews_ibfk_1");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.Models.Transaction", b =>
                {
                    b.HasOne("Ecommerce.Models.Card", "card")
                        .WithMany("Transactions")
                        .HasForeignKey("card_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Transactions_ibfk_3");

                    b.HasOne("Ecommerce.Models.Order", "order")
                        .WithMany("Transactions")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Transactions_ibfk_2");

                    b.HasOne("Ecommerce.Models.User", "user")
                        .WithMany("Transactions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Transactions_ibfk_1");

                    b.Navigation("card");

                    b.Navigation("order");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.Card", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Ecommerce.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Ecommerce.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cards");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
